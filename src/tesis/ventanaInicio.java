/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tesis;

import org.jenetics.BitChromosome;
import org.jenetics.BitGene;
import org.jenetics.Genotype;
import org.jenetics.engine.Engine;
import org.jenetics.engine.EvolutionResult;
import org.jenetics.util.Factory;

import POJO.Disciplina;
import POJO.Edad;
import POJO.Institucion;
import POJO.Neo4jSessionFactory;
import POJO.Investigador;
import POJO.Nacionalidad;
import POJO.Pais;
import POJO.Provincia;
import POJO.Rangoetario;
import POJO.Resideen;
import POJO.Tienecomodisciplina;
import POJO.Trabajaen;
import com.google.gson.Gson;
import java.sql.SQLException;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.neo4j.driver.v1.AuthTokens;
import org.neo4j.driver.v1.Driver;
import org.neo4j.driver.v1.GraphDatabase;
import org.neo4j.driver.v1.Record;
import org.neo4j.driver.v1.Session;
import org.neo4j.driver.v1.StatementResult;

import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.Node;
import org.neo4j.graphdb.Result;
import org.neo4j.graphdb.Transaction;
import org.neo4j.graphdb.factory.GraphDatabaseFactory;
import org.neo4j.graphdb.index.Index;
import org.neo4j.graphdb.index.IndexManager;
import static org.neo4j.helpers.collection.Iterables.map;
import org.neo4j.kernel.EmbeddedGraphDatabase;
import org.neo4j.ogm.session.SessionFactory;
import static org.neo4j.ogm.session.Utils.map;
import xml.Escritor;

/**
 *
 * @author Edu
 */
public class ventanaInicio extends javax.swing.JFrame {

    /**
     * Creates new form ventanaInicio
     */
    Driver driver;
    public ventanaInicio() {
        initComponents();
        driver = GraphDatabase.driver( "bolt://localhost", AuthTokens.basic( "neo4j", "123456" ) );
        Session session = driver.session();
        Gson gson = new Gson();
        StatementResult result= session.run("MATCH (p:investigador) RETURN keys(p) as claves limit 1;");
        while(result.hasNext()){
            Record record=result.next(); 
            List<Object> lista=record.get( "claves" ).asList();
            for(int i=0;i<lista.size();i++)
                jComboPropiedad.addItem(String.valueOf(lista.get(i)));
        }
        StatementResult relaciones= session.run("match ()-[r]-() return distinct type(r) as relacion");
        while(relaciones.hasNext()){
            Record record=relaciones.next(); 
            jComboRelacion.addItem(record.get( "relacion" ).asString());
        }
        
        session.close();
  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePropiedades = new javax.swing.JTable();
        jComboValor = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jComboPropiedad = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableRelaciones = new javax.swing.JTable();
        jComboRelacion = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextCantidad = new javax.swing.JTextField();
        checkboxgexf = new java.awt.Checkbox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setName(""); // NOI18N

        jTablePropiedades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Propiedad", "Valor"
            }
        ));
        jScrollPane1.setViewportView(jTablePropiedades);
        if (jTablePropiedades.getColumnModel().getColumnCount() > 0) {
            jTablePropiedades.getColumnModel().getColumn(1).setHeaderValue("Valor");
        }

        jComboValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboValorActionPerformed(evt);
            }
        });

        jLabel2.setText("Valor");

        jLabel1.setText("Propiedad");

        jComboPropiedad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboPropiedadActionPerformed(evt);
            }
        });

        jButton1.setText("Agregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboPropiedad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboValor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(1, 1, 1))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboPropiedad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Filtro Nodos");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Filtro relaciones");

        jPanel2.setName(""); // NOI18N

        jTableRelaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Relacion"
            }
        ));
        jScrollPane2.setViewportView(jTableRelaciones);

        jLabel5.setText("Relacion");

        jButton2.setText("Agregar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton2))
                            .addComponent(jComboRelacion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(1, 1, 1))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboRelacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton3.setLabel("Ejecutar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel6.setText("Cantidad de miembros del comite");

        checkboxgexf.setLabel("Generar archivo gexf");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(checkboxgexf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(checkboxgexf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboPropiedadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboPropiedadActionPerformed
        jComboValor.removeAllItems();
        Session session = driver.session();
        StatementResult result= session.run("MATCH (p:investigador) RETURN distinct p."+jComboPropiedad.getSelectedItem()+" as resultado order by resultado ;");
        while(result.hasNext()){
            Record record=result.next(); 
            jComboValor.addItem(record.get( "resultado").asString());
        }
    }//GEN-LAST:event_jComboPropiedadActionPerformed

    private void jComboValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboValorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboValorActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel dtm= (DefaultTableModel)jTablePropiedades.getModel();
        dtm.addRow(new Object[2]);
        int indice=dtm.getRowCount()-1;
        dtm.setValueAt(jComboPropiedad.getSelectedItem(), indice,0);
        dtm.setValueAt(jComboValor.getSelectedItem(), indice,1);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel dtm= (DefaultTableModel)jTableRelaciones.getModel();
        dtm.addRow(new Object[1]);
        int indice=dtm.getRowCount()-1;
        dtm.setValueAt(jComboRelacion.getSelectedItem(), indice,0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        /*Session session = driver.session();
        Gson gson = new Gson();
        StatementResult result= session.run("MATCH (from:investigador), (to:investigador) , path = shortestPath((from)-[*0..]-(to)) RETURN path AS shortestPath ");
        GraphDatabaseService graphDb = new EmbeddedGraphDatabase("C:\\Users\\Edu\\Documents\\Neo4j\\default.graphdb");
        System.out.println(graphDb.index().forNodes( "investigador" )
                .query( "match m:investigador" )
                .stream());  
        session.close();
        driver.close();*/
       Integer cantidad=0;
       try{
        cantidad=Integer.valueOf(jTextCantidad.getText());
       }catch(Exception e){
       JOptionPane.showMessageDialog(rootPane, "Debe ingresar un numero entero en el campo cantidad de miembros del comite", "Error", 0);
        }
        if(cantidad>0){
            SessionFactory sessionFactory = new SessionFactory("POJO");
            org.neo4j.ogm.session.Session session=sessionFactory.openSession();
            //session = sessionFactory.openSession("http://localhost:7474","neo4j","123456");
          String consulta="MATCH (i:investigador)";
            String textoXML="";
              int n=0;
             DefaultTableModel dtm=(DefaultTableModel)jTablePropiedades.getModel();
             String filtro="";
            for(int i=0;i<jTablePropiedades.getRowCount();i++){
                if(i==0)
                    filtro=filtro+" where i."+dtm.getValueAt(i,0)+"='"+dtm.getValueAt(i, 1)+"'";
                else
                    filtro=filtro+" and i."+dtm.getValueAt(i,0)+"='"+dtm.getValueAt(i, 1)+"'";
            } 
       consulta=consulta+filtro+" return i";       
       Iterable<Investigador> iterableInv=session.query(Investigador.class,consulta,Collections.<String, Object> emptyMap());
       Iterator<Investigador> iteradorInv=iterableInv.iterator();
       Vector<Investigador> vector= new Vector<Investigador>();
       while(iteradorInv.hasNext()){
        Investigador i=iteradorInv.next();
        textoXML=textoXML+"<node id=\""+i.getId()+ "\" label=\""+i.getNombre()+" "+i.getApellido()+"\"/> \n";
        vector.add(i);
        n=n+1;
       }
       if(checkboxgexf.getState())
        generarArchivoDibujo(textoXML, session, n, filtro);
       try {
                Algoritmo a= new Algoritmo(vector,driver,crearFiltro(),cantidad,1044,1110);
                 Algoritmo b=new Algoritmo(vector,driver,crearFiltro(),cantidad,1110,1170);
                  Algoritmo c= new Algoritmo(vector,driver,crearFiltro(),cantidad,1170,1235);
                   Algoritmo d= new Algoritmo(vector,driver,crearFiltro(),cantidad,1235,1300);
                   Algoritmo e= new Algoritmo(vector,driver,crearFiltro(),cantidad,1300,1367);
                   
                   a.start();
                    b.start();
                     c.start();
                      d.start();
                      e.start();
                   
            } catch (SQLException ex) {
                Logger.getLogger(ventanaInicio.class.getName()).log(Level.SEVERE, null, ex);
            }
     }
    }//GEN-LAST:event_jButton3ActionPerformed

    public void generarArchivoDibujo(String investigadores,org.neo4j.ogm.session.Session session,int cantInv,String filtro){
       String textoXML=investigadores;
       int n=cantInv;
       String consulta="MATCH (n:disciplina) return n";
      System.out.println(consulta);
      session.clear();
       Iterable<Disciplina> iterableDis=session.query(Disciplina.class,consulta,Collections.<String, Object> emptyMap());
     Iterator<Disciplina> iteradorDis=iterableDis.iterator();
       while(iteradorDis.hasNext()){
        Disciplina d=iteradorDis.next();
        textoXML=textoXML+"<node id=\""+d.getId()+ "\" label=\""+d.getNombre()+"\"/> \n";
         n=n+1;
                   
        }
          consulta="MATCH (n:institucion) return n";
      System.out.println(consulta);
     session.clear();
       Iterable<Institucion> iterableIns=session.query(Institucion.class,consulta,Collections.<String, Object> emptyMap());
     Iterator<Institucion> iteradorIns=iterableIns.iterator();
       while(iteradorIns.hasNext()){
        Institucion i=iteradorIns.next();
        textoXML=textoXML+"<node id=\""+i.getId()+ "\" label=\""+i.getNombre().replaceAll("\"", "")+"\"/> \n";
         n=n+1;
                   
        }
       
       consulta="MATCH (n:rangoetario) return n";
      System.out.println(consulta);
     session.clear();
       Iterable<Rangoetario> iterableRE=session.query(Rangoetario.class,consulta,Collections.<String, Object> emptyMap());
     Iterator<Rangoetario> iteradorRE=iterableRE.iterator();
       while(iteradorRE.hasNext()){
        Rangoetario re=iteradorRE.next();
        textoXML=textoXML+"<node id=\""+re.getId()+ "\" label=\""+re.getNombre()+"\"/> \n";
         n=n+1;
                   
        }
        
       consulta="MATCH (n:pais) return n";
      System.out.println(consulta);
     session.clear();
            Iterable<Pais> iterablePais=session.query(Pais.class,consulta,Collections.<String, Object> emptyMap());
     Iterator<Pais> iteradorPais=iterablePais.iterator();
       while(iteradorPais.hasNext()){
        Pais p=iteradorPais.next();
        textoXML=textoXML+"<node id=\""+p.getId()+ "\" label=\""+p.getNombre()+"\"/> \n";
         n=n+1;
                   
        }
       
         consulta="MATCH (n:provincia) return n";
      System.out.println(consulta);
     session.clear();
       Iterable<Provincia> iterableProv=session.query(Provincia.class,consulta,Collections.<String, Object> emptyMap());
     Iterator<Provincia> iteradorProv=iterableProv.iterator();
       while(iteradorProv.hasNext()){
        Provincia p=iteradorProv.next();
        textoXML=textoXML+"<node id=\""+p.getId()+ "\" label=\""+p.getNombre()+"\"/> \n";
         n=n+1;
                   
        }
      
     String textoxmlEnlaces="";
     int x=0;
   
    consulta=" MATCH p=(i:investigador)-[r:trabajaen]->()  "+filtro+" RETURN p";
    System.out.println(consulta);
    session.clear();
    Iterable<Trabajaen> iterableTrabaja=session.query(Trabajaen.class,consulta,Collections.<String, Object> emptyMap());
    Iterator<Trabajaen> iteradorTrabaja=iterableTrabaja.iterator();
    while(iteradorTrabaja.hasNext()){
        Trabajaen te=iteradorTrabaja.next();
        textoxmlEnlaces=textoxmlEnlaces+"<edge id=\""+te.getId()+ "\" source=\""+te.getOrigen().getId()+"\" target=\""+te.getDestino().getId()+"\" /> \n";
         x=x+1;
    }
      
    consulta=" MATCH p=(i:investigador)-[r:nacionalidad]->() "+filtro+" RETURN p";
    System.out.println(consulta);
    session.clear();
    Iterable<Nacionalidad> iterableNacionalidad=session.query(Nacionalidad.class,consulta,Collections.<String, Object> emptyMap());
    Iterator<Nacionalidad> iteradorNacionalidad=iterableNacionalidad.iterator();
    while(iteradorNacionalidad.hasNext()){
        Nacionalidad nac=iteradorNacionalidad.next();
        textoxmlEnlaces=textoxmlEnlaces+"<edge id=\""+nac.getId()+ "\" source=\""+nac.getOrigen().getId()+"\" target=\""+nac.getDestino().getId()+"\" /> \n";
         x=x+1;
    }
       
    consulta=" MATCH p=(i:investigador)-[r:edad]->() "+filtro+" RETURN p";
    System.out.println(consulta);
    session.clear();
    Iterable<Edad> iterableEdad=session.query(Edad.class,consulta,Collections.<String, Object> emptyMap());
    Iterator<Edad> iteradorEdad=iterableEdad.iterator();
    while(iteradorEdad.hasNext()){
        Edad e=iteradorEdad.next();
        textoxmlEnlaces=textoxmlEnlaces+"<edge id=\""+e.getId()+ "\" source=\""+e.getOrigen().getId()+"\" target=\""+e.getDestino().getId()+"\" /> \n";
         x=x+1;
    }
    
    consulta=" MATCH p=(i:investigador)-[r:resideen]->() "+filtro+" RETURN p";
    System.out.println(consulta);
    session.clear();
    Iterable<Resideen> iterableReside=session.query(Resideen.class,consulta,Collections.<String, Object> emptyMap());
    Iterator<Resideen> iteradorReside=iterableReside.iterator();
    while(iteradorReside.hasNext()){
        Resideen re=iteradorReside.next();
        textoxmlEnlaces=textoxmlEnlaces+"<edge id=\""+re.getId()+ "\" source=\""+re.getOrigen().getId()+"\" target=\""+re.getDestino().getId()+"\" /> \n";
         x=x+1;
    }
    
    consulta=" MATCH p=(i:investigador)-[r:tienecomodisciplina]->() "+filtro+" RETURN p";
    System.out.println(consulta);
    session.clear();
    Iterable<Tienecomodisciplina> iterableDisciplina=session.query(Tienecomodisciplina.class,consulta,Collections.<String, Object> emptyMap());
    Iterator<Tienecomodisciplina> iteradorDisciplina=iterableDisciplina.iterator();
    while(iteradorDisciplina.hasNext()){
        Tienecomodisciplina d=iteradorDisciplina.next();
        textoxmlEnlaces=textoxmlEnlaces+"<edge id=\""+d.getId()+ "\" source=\""+d.getOrigen().getId()+"\" target=\""+d.getDestino().getId()+"\" /> \n";
         x=x+1;
    }
    textoXML="<nodes count=\""+n+"\"> \n "+ textoXML+ "</nodes>";
    textoxmlEnlaces="<edges count=\""+x+"\"> \n "+ textoxmlEnlaces+ "</edges>";
    System.out.println(textoxmlEnlaces);
    Escritor.escribir(textoXML+"\n"+textoxmlEnlaces, "C:\\Users\\Edu\\Desktop\\Tesis\\nodos.xml");  
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventanaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventanaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventanaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventanaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventanaInicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Checkbox checkboxgexf;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboPropiedad;
    private javax.swing.JComboBox<String> jComboRelacion;
    private javax.swing.JComboBox<String> jComboValor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTablePropiedades;
    private javax.swing.JTable jTableRelaciones;
    private javax.swing.JTextField jTextCantidad;
    // End of variables declaration//GEN-END:variables

    private String crearFiltro() {
         DefaultTableModel dtm=(DefaultTableModel)jTableRelaciones.getModel();
         String resultado="";
         for(int i=0;i<dtm.getRowCount();i++)
             resultado=resultado+dtm.getValueAt(i,0)+"|";
         if(!resultado.equals("")){
             resultado=":"+resultado;
             resultado=resultado.substring(0, resultado.length()-1);
          }
         System.out.println("resultado: "+resultado);
         return resultado;
    }
}
